{"version":3,"file":"static/js/495.e438beb3.chunk.js","mappings":"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","sources":["../node_modules/@toruslabs/solana-embed/node_modules/is-stream/index.js","../node_modules/@toruslabs/solana-embed/src/messages.ts","../node_modules/@toruslabs/solana-embed/src/interfaces.ts","../node_modules/@toruslabs/solana-embed/src/config.ts","../node_modules/@toruslabs/solana-embed/src/loglevel.ts","../node_modules/@toruslabs/solana-embed/src/utils.ts","../node_modules/@toruslabs/solana-embed/src/baseProvider.ts","../node_modules/@toruslabs/solana-embed/src/embedUtils.ts","../node_modules/@toruslabs/solana-embed/src/PopupHandler.ts","../node_modules/@toruslabs/solana-embed/src/communicationProvider.ts","../node_modules/@toruslabs/solana-embed/src/inPageProvider.ts","../node_modules/@toruslabs/solana-embed/src/siteMetadata.ts","../node_modules/@toruslabs/solana-embed/src/embed.ts","../node_modules/@web3auth/torus-solana-adapter/src/solanaWalletAdapter.ts","../node_modules/fast-deep-equal/index.js"],"sourcesContent":["export function isStream(stream) {\n\treturn stream !== null\n\t\t&& typeof stream === 'object'\n\t\t&& typeof stream.pipe === 'function';\n}\n\nexport function isWritableStream(stream) {\n\treturn isStream(stream)\n\t\t&& stream.writable !== false\n\t\t&& typeof stream._write === 'function'\n\t\t&& typeof stream._writableState === 'object';\n}\n\nexport function isReadableStream(stream) {\n\treturn isStream(stream)\n\t\t&& stream.readable !== false\n\t\t&& typeof stream._read === 'function'\n\t\t&& typeof stream._readableState === 'object';\n}\n\nexport function isDuplexStream(stream) {\n\treturn isWritableStream(stream)\n\t\t&& isReadableStream(stream);\n}\n\nexport function isTransformStream(stream) {\n\treturn isDuplexStream(stream)\n\t\t&& typeof stream._transform === 'function';\n}\n","export default {\n  errors: {\n    disconnected: (): string => \"Torus: Lost connection to Torus.\",\n    permanentlyDisconnected: (): string => \"Torus: Disconnected from iframe. Page reload required.\",\n    unsupportedSync: (method: string): string =>\n      `Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n    invalidDuplexStream: (): string => \"Must provide a Node.js-style duplex stream.\",\n    invalidOptions: (maxEventListeners: number): string => `Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n    invalidRequestArgs: (): string => `Expected a single, non-array, object argument.`,\n    invalidRequestMethod: (): string => `'args.method' must be a non-empty string.`,\n    invalidRequestParams: (): string => `'args.params' must be an object or array if provided.`,\n    invalidLoggerObject: (): string => `'args.logger' must be an object if provided.`,\n    invalidLoggerMethod: (method: string): string => `'args.logger' must include required method '${method}'.`,\n  },\n  info: {\n    connected: (chainId: string): string => `Torus: Connected to chain with ID \"${chainId}\".`,\n  },\n  warnings: {},\n};\n","import { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nexport const PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\",\n} as const;\n\nexport const TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\",\n} as const;\n\nexport type PAYMENT_PROVIDER_TYPE = typeof PAYMENT_PROVIDER[keyof typeof PAYMENT_PROVIDER];\n\nexport type TORUS_BUILD_ENV_TYPE = typeof TORUS_BUILD_ENV[keyof typeof TORUS_BUILD_ENV];\n\nexport const BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\",\n} as const;\n\nexport type EMBED_TRANSLATION_ITEM = {\n  continue: string;\n  actionRequired: string;\n  pendingAction: string;\n  cookiesRequired: string;\n  enableCookies: string;\n  clickHere: string;\n};\n\nexport type BUTTON_POSITION_TYPE = typeof BUTTON_POSITION[keyof typeof BUTTON_POSITION];\n\nexport type WALLET_PATH = \"transfer\" | \"topup\" | \"home\" | \"settings\" | \"history\";\n\nexport const LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\",\n} as const;\n\nexport type LOGIN_PROVIDER_TYPE = typeof LOGIN_PROVIDER[keyof typeof LOGIN_PROVIDER];\n\nexport interface TorusCtorArgs {\n  /**\n   * Z-index of the modal and iframe\n   * @defaultValue 99999\n   */\n  modalZIndex?: number;\n}\n\nexport interface NetworkInterface {\n  /**\n   * Block explorer url for the chain\n   * @example https://explorer.solana.com/\n   */\n  blockExplorerUrl: string;\n  /**\n   * Logo url for the base token\n   */\n  logo: string;\n  /**\n   * Name for ticker\n   * @example 'Solana'\n   */\n  tickerName: string;\n  /**\n   * Symbol for ticker\n   * @example SOL\n   */\n  ticker: string;\n  /**\n   * RPC target Url for the chain\n   * @example https://api.devnet.solana.com/\n   */\n  rpcTarget: string;\n  /**\n   * Chain Id parameter(hex with 0x prefix) for the network. Mandatory for all networks. (assign one with a map to network identifier for platforms)\n   * @example 0x1 for mainnet, 0x2 for testnet, 0x3 for devnet,  'loading' if not connected to anything yet or connection fails\n   * @defaultValue 'loading'\n   */\n  chainId: string;\n  /**\n   * Display name for the network\n   */\n  displayName: string;\n}\n\nexport interface PaymentParams {\n  /**\n   * Address to send the funds to\n   */\n  selectedAddress?: string;\n  /**\n   * Default fiat currency for the user to make the payment in\n   */\n  selectedCurrency?: string;\n  /**\n   * Amount to buy in the selectedCurrency\n   */\n  fiatValue?: number;\n  /**\n   * Cryptocurrency to buy\n   */\n  selectedCryptoCurrency?: string;\n  /**\n   * Amount Cryptocurrency to buy\n   */\n  cryptoAmount?: number;\n}\n\nexport interface LoginParams {\n  loginProvider?: string;\n}\n\nexport interface UserInfo {\n  /**\n   * Email of the logged in user\n   */\n  email: string;\n  /**\n   * Full name of the logged in user\n   */\n  name: string;\n  /**\n   * Profile image of the logged in user\n   */\n  profileImage: string;\n  /**\n   * verifier of the logged in user (google, facebook etc)\n   */\n  verifier: string;\n  /**\n   * Verifier Id of the logged in user\n   *\n   * email for google,\n   * id for facebook,\n   * username for reddit,\n   * id for twitch,\n   * id for discord\n   */\n  verifierId: string;\n}\n\nexport interface LocaleLinks<T> {\n  /**\n   * Item corresponding to english\n   */\n  en?: T;\n  /**\n   * Item corresponding to japanese\n   */\n  ja?: T;\n  /**\n   * Item corresponding to korean\n   */\n  ko?: T;\n  /**\n   * Item corresponding to german\n   */\n  de?: T;\n  /**\n   * Item corresponding to chinese (simplified)\n   */\n  zh?: T;\n  /**\n   * Item corresponding to spanish\n   */\n  es?: T;\n}\n\nexport type NetworkLabel = \"mainnet-beta\" | \"testnet\" | \"devnet\";\n\nexport interface TorusParams {\n  /**\n   * Determines where the torus widget is visible on the page.\n   * @defaultValue bottom-left\n   */\n  buttonPosition?: BUTTON_POSITION_TYPE;\n  /**\n   * Api key\n   * Get yours today at {@link https://developer.tor.us | Dashboard}\n   */\n  apiKey?: string;\n\n  /**\n   * Torus Network Object\n   */\n  network?: NetworkInterface | NetworkLabel;\n  /**\n   * Build Environment of Torus.\n   *\n   * production uses https://solana.tor.us,\n   *\n   * development uses http://localhost:8080 (expects torus-website to be run locally),\n   *\n   * testing uses https://solana-testing.tor.us (latest internal build)\n   * @defaultValue production\n   */\n  buildEnv?: TORUS_BUILD_ENV_TYPE;\n  /**\n   * Enables or disables logging.\n   *\n   * Defaults to false in prod and true in other environments\n   */\n  enableLogging?: boolean;\n  /**\n   * whether to show/hide torus widget.\n   *\n   * Defaults to true\n   * @defaultValue true\n   */\n  showTorusButton?: boolean;\n  /**\n   * Prefers to use localStorage instead of sessionStorage for torus iframe. Allows longer lived sessions\n   *\n   * Defaults to false\n   * @defaultValue false\n   */\n  useLocalStorage?: boolean;\n  /**\n   * Allows passing external data for initialize\n   *\n   * Defaults to empty object\n   */\n  extraParams?: { [keyof: string]: string };\n}\n\nexport interface TorusLoginParams {\n  loginProvider?: LOGIN_PROVIDER_TYPE;\n  login_hint?: string;\n}\n\nexport interface ProviderOptions {\n  /**\n   * The name of the stream used to connect to the wallet.\n   */\n  jsonRpcStreamName?: string;\n\n  /**\n   * The maximum number of event listeners.\n   */\n  maxEventListeners?: number;\n}\n\nexport interface BaseProviderState {\n  isConnected: boolean;\n  initialized: boolean;\n  isPermanentlyDisconnected: boolean;\n  hasEmittedConnection: boolean;\n}\n\nexport interface InPageProviderState extends BaseProviderState {\n  accounts: null | string[];\n  isUnlocked: boolean;\n}\n\nexport interface CommunicationProviderState extends BaseProviderState {\n  buttonPosition: string;\n  isLoggedIn: boolean;\n  torusWidgetVisibility: boolean;\n  currentLoginProvider: LOGIN_PROVIDER_TYPE;\n  isIFrameFullScreen: boolean;\n}\n\nexport type Maybe<T> = Partial<T> | T | null | undefined;\n\nexport interface UnValidatedJsonRpcRequest extends JRPCRequest<unknown> {\n  windowId?: string;\n}\n\nexport interface RequestArguments<T> {\n  /** The RPC method to request. */\n  method: string;\n\n  /** The params of the RPC method, if any. */\n  params?: T;\n}\n","import { EMBED_TRANSLATION_ITEM, LocaleLinks, LOGIN_PROVIDER } from \"./interfaces\";\n\nconst translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\",\n    },\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\",\n    },\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\",\n    },\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\",\n    },\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\",\n    },\n  },\n} as LocaleLinks<{ embed: EMBED_TRANSLATION_ITEM }>;\n\nexport default {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations,\n  prodTorusUrl: \"\",\n  localStorageKey: `torus-${window.location.hostname}`,\n};\n","import loglevel from \"loglevel\";\n\nexport default loglevel.getLogger(\"solana-embed\");\n","import { JRPCMiddleware, SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { LogLevelDesc } from \"loglevel\";\n\nimport config from \"./config\";\nimport { NetworkInterface, NetworkLabel } from \"./interfaces\";\nimport log from \"./loglevel\";\n\n// utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\nexport function createErrorMiddleware(): JRPCMiddleware<unknown, unknown> {\n  return (req, res, next) => {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: `The request 'method' must be a non-empty string.`,\n        data: req,\n      });\n    }\n\n    next((done) => {\n      const { error } = res;\n      if (!error) {\n        return done();\n      }\n      log.error(`Torus - RPC Error: ${error.message}`, error);\n      return done();\n    });\n  };\n}\n\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\nexport function logStreamDisconnectWarning(remoteLabel: string, error: Error, emitter: SafeEventEmitter): void {\n  let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n  if (error?.stack) {\n    warningMsg += `\\n${error.stack}`;\n  }\n  log.warn(warningMsg);\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nexport const getWindowId = (): string => Math.random().toString(36).slice(2);\n\nexport const getTorusUrl = async (buildEnv: string): Promise<{ torusUrl: string; logLevel: LogLevelDesc }> => {\n  let torusUrl: string;\n  let logLevel: LogLevelDesc;\n  // const versionUsed = version;\n  // log.info(\"solana embed version used: \", versionUsed);\n  switch (buildEnv) {\n    case \"testing\":\n      torusUrl = \"https://solana-testing.tor.us\";\n      logLevel = \"debug\";\n      break;\n    case \"development\":\n      torusUrl = \"http://localhost:8080\";\n      logLevel = \"debug\";\n      break;\n    default:\n      torusUrl = `https://solana.tor.us`;\n      logLevel = \"error\";\n      break;\n  }\n  return { torusUrl, logLevel };\n};\n\nexport const getUserLanguage = (): string => {\n  let userLanguage = window.navigator.language || \"en-US\";\n  const userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(config.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nexport const NOOP = (): void => {\n  // empty function\n};\n\nexport const FEATURES_PROVIDER_CHANGE_WINDOW = { height: 660, width: 375 };\nexport const FEATURES_DEFAULT_WALLET_WINDOW = { height: 740, width: 1315 };\nexport const FEATURES_DEFAULT_POPUP_WINDOW = { height: 700, width: 1200 };\nexport const FEATURES_CONFIRM_WINDOW = { height: 600, width: 400 };\n\nexport function storageAvailable(type: \"localStorage\" | \"sessionStorage\"): boolean {\n  let storage: Storage;\n  try {\n    storage = window[type];\n    const x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return (\n      e &&\n      // everything except Firefox\n      (e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" ||\n        // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\n      // acknowledge QuotaExceededError only if there's something already stored\n      storage &&\n      storage.length !== 0\n    );\n  }\n}\n\n/**\n * popup handler utils\n */\nexport function getPopupFeatures({ width: w, height: h }: { width: number; height: number }): string {\n  // Fixes dual-screen position                             Most browsers      Firefox\n  const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n\n  const width = window.innerWidth\n    ? window.innerWidth\n    : document.documentElement.clientWidth\n    ? document.documentElement.clientWidth\n    : window.screen.width;\n\n  const height = window.innerHeight\n    ? window.innerHeight\n    : document.documentElement.clientHeight\n    ? document.documentElement.clientHeight\n    : window.screen.height;\n\n  const systemZoom = 1; // No reliable estimate\n\n  const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n  return features;\n}\n\nexport const getNetworkConfig = (label: NetworkLabel): NetworkInterface | undefined => {\n  switch (label) {\n    case \"mainnet-beta\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x1\",\n        displayName: \"Solana Mainnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.mainnet-beta.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"testnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x2\",\n        displayName: \"Solana Testnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.testnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    case \"devnet\":\n      return {\n        blockExplorerUrl: \"https://explorer.solana.com\",\n        chainId: \"0x3\",\n        displayName: \"Solana Devnet\",\n        logo: \"solana.svg\",\n        rpcTarget: \"https://api.devnet.solana.com\",\n        ticker: \"SOL\",\n        tickerName: \"Solana Token\",\n      } as NetworkInterface;\n\n    default:\n      return undefined;\n  }\n};\n","import { createLoggerMiddleware, SafeEventEmitterProvider, SendCallBack } from \"@toruslabs/base-controllers\";\nimport {\n  createIdRemapMiddleware,\n  createStreamMiddleware,\n  getRpcPromiseCallback,\n  JRPCEngine,\n  JRPCRequest,\n  JRPCResponse,\n  ObjectMultiplex,\n  SafeEventEmitter,\n  Stream,\n} from \"@toruslabs/openlogin-jrpc\";\nimport { ethErrors } from \"eth-rpc-errors\";\nimport { isDuplexStream } from \"is-stream\";\nimport pump from \"pump\";\nimport type { Duplex } from \"readable-stream\";\n\nimport { BaseProviderState, Maybe, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport messages from \"./messages\";\nimport { createErrorMiddleware, logStreamDisconnectWarning } from \"./utils\";\n\nabstract class BaseProvider<U extends BaseProviderState> extends SafeEventEmitter implements SafeEventEmitterProvider {\n  /**\n   * Indicating that this provider is a Torus provider.\n   */\n  public readonly isTorus: true;\n\n  _rpcEngine: JRPCEngine;\n\n  jsonRpcConnectionEvents: SafeEventEmitter;\n\n  protected _state: U;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super();\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n    this.isTorus = true;\n    this.setMaxListeners(maxEventListeners);\n\n    this._handleConnect = this._handleConnect.bind(this);\n    this._handleDisconnect = this._handleDisconnect.bind(this);\n    this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n\n    this._rpcRequest = this._rpcRequest.bind(this);\n    this._initializeState = this._initializeState.bind(this);\n\n    this.request = this.request.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    // this.enable = this.enable.bind(this);\n\n    // setup connectionStream multiplexing\n    const mux = new ObjectMultiplex();\n    pump(\n      connectionStream as unknown as Stream,\n      mux as unknown as Stream,\n      connectionStream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus\")\n    );\n\n    // ignore phishing warning message (handled elsewhere)\n    mux.ignoreStream(\"phishing\");\n\n    // setup own event listeners\n    // connect to async provider\n\n    const jsonRpcConnection = createStreamMiddleware();\n    pump(\n      jsonRpcConnection.stream as unknown as Stream,\n      mux.createStream(jsonRpcStreamName) as unknown as Stream,\n      jsonRpcConnection.stream as unknown as Stream,\n      this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\")\n    );\n\n    // handle RPC requests via dapp-side rpc engine\n    const rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({ origin: location.origin }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    this._rpcEngine = rpcEngine;\n\n    this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n  }\n\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */\n  async request<TArgs, TResponse>(args: RequestArguments<TArgs>): Promise<Maybe<TResponse>> {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestArgs(),\n        data: args,\n      });\n    }\n\n    const { method, params } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestMethod(),\n        data: args,\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw ethErrors.rpc.invalidRequest({\n        message: messages.errors.invalidRequestParams(),\n        data: args,\n      });\n    }\n\n    return new Promise((resolve, reject) => {\n      this._rpcRequest({ method, params }, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  send<T, V>(req: JRPCRequest<T>, callback: SendCallBack<V>): void;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  send(payload: JRPCRequest<unknown>, callback: (error: Error | null, result?: JRPCResponse<unknown>) => void): void {\n    this._rpcRequest(payload, callback);\n  }\n\n  sendAsync<T, V>(req: JRPCRequest<T>): Promise<V>;\n\n  /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */\n  sendAsync(payload: JRPCRequest<unknown>): Promise<unknown> {\n    return new Promise((resolve, reject) => {\n      this._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n    });\n  }\n\n  /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleStreamDisconnect(streamName: string, error: Error): void {\n    logStreamDisconnectWarning(streamName, error, this);\n    this._handleDisconnect(false, error ? error.message : undefined);\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  abstract _initializeState(...args: unknown[]): Promise<void>;\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected abstract _rpcRequest(\n    payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[],\n    callback: (...args: unknown[]) => void,\n    isInternal?: boolean\n  ): void;\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInPageProvider#connect\n   */\n  protected abstract _handleConnect(...args: unknown[]): void;\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected abstract _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void;\n}\n\nexport default BaseProvider;\n","export const handleEvent = (handle: EventTarget, eventName: string, handler: (...args: unknown[]) => void, ...handlerArgs: unknown[]): void => {\n  const handlerWrapper = () => {\n    handler(...handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nexport async function documentReady(): Promise<void> {\n  return new Promise<void>((resolve) => {\n    if (document.readyState !== \"loading\") {\n      resolve();\n    } else {\n      handleEvent(document, \"DOMContentLoaded\", resolve);\n    }\n  });\n}\n\nexport const htmlToElement = <T extends Element>(html: string): T => {\n  const template = window.document.createElement(\"template\");\n  const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild as T;\n};\n","import { SafeEventEmitter } from \"@toruslabs/openlogin-jrpc\";\n\nimport { FEATURES_DEFAULT_POPUP_WINDOW, getPopupFeatures } from \"./utils\";\n\nclass PopupHandler extends SafeEventEmitter {\n  url: URL;\n\n  target: string;\n\n  features: string;\n\n  window: Window;\n\n  windowTimer: number;\n\n  iClosedWindow: boolean;\n\n  constructor({ url, target, features }: { url: URL; target?: string; features?: string }) {\n    super();\n    this.url = url;\n    this.target = target || \"_blank\";\n    this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    this.window = undefined;\n    this.windowTimer = undefined;\n    this.iClosedWindow = false;\n    this._setupTimer();\n  }\n\n  _setupTimer(): void {\n    this.windowTimer = Number(\n      setInterval(() => {\n        if (this.window && this.window.closed) {\n          clearInterval(this.windowTimer);\n          if (!this.iClosedWindow) {\n            this.emit(\"close\");\n          }\n          this.iClosedWindow = false;\n          this.window = undefined;\n        }\n        if (this.window === undefined) clearInterval(this.windowTimer);\n      }, 500)\n    );\n  }\n\n  open(): Promise<void> {\n    this.window = window.open(this.url.href, this.target, this.features);\n    if (this.window?.focus) this.window.focus();\n    return Promise.resolve();\n  }\n\n  close(): void {\n    this.iClosedWindow = true;\n    if (this.window) this.window.close();\n  }\n\n  redirect(locationReplaceOnRedirect: boolean): void {\n    if (locationReplaceOnRedirect) {\n      window.location.replace(this.url.href);\n    } else {\n      window.location.href = this.url.href;\n    }\n  }\n}\n\nexport default PopupHandler;\n","import { COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, CommunicationWalletProviderState } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport {\n  BUTTON_POSITION,\n  CommunicationProviderState,\n  EMBED_TRANSLATION_ITEM,\n  LOGIN_PROVIDER_TYPE,\n  ProviderOptions,\n  RequestArguments,\n  UnValidatedJsonRpcRequest,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\nimport PopupHandler from \"./PopupHandler\";\nimport { FEATURES_CONFIRM_WINDOW, getPopupFeatures, getUserLanguage } from \"./utils\";\n\nclass TorusCommunicationProvider extends BaseProvider<CommunicationProviderState> {\n  protected static _defaultState: CommunicationProviderState = {\n    buttonPosition: \"bottom-left\",\n    currentLoginProvider: null,\n    isIFrameFullScreen: false,\n    hasEmittedConnection: false,\n\n    torusWidgetVisibility: false,\n    initialized: false,\n    isLoggedIn: false,\n    isPermanentlyDisconnected: false,\n    isConnected: false,\n  };\n\n  public embedTranslations: EMBED_TRANSLATION_ITEM;\n\n  public torusUrl: string;\n\n  public dappStorageKey: string;\n\n  public windowRefs: Record<string, PopupHandler>;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusIframe: HTMLIFrameElement;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusCommunicationProvider._defaultState,\n    };\n\n    // public state\n    this.torusUrl = \"\";\n    this.dappStorageKey = \"\";\n    const languageTranslations = configuration.translations[getUserLanguage()];\n    this.embedTranslations = languageTranslations.embed;\n    this.windowRefs = {};\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const notificationHandler = (payload: RequestArguments<Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        const { isFullScreen, rid } = params;\n        this._displayIframe({ isFull: isFullScreen as boolean, rid: rid as string });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        const { windowId, url } = params as Record<string, string>;\n        this._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        this._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        const { currentLoginProvider } = params;\n        this._state.isLoggedIn = true;\n        this._state.currentLoginProvider = currentLoginProvider as LOGIN_PROVIDER_TYPE;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        this._state.isLoggedIn = false;\n        this._state.currentLoginProvider = null;\n        this._displayIframe();\n      }\n    };\n\n    this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n  }\n\n  get isLoggedIn(): boolean {\n    return this._state.isLoggedIn;\n  }\n\n  get isIFrameFullScreen(): boolean {\n    return this._state.isIFrameFullScreen;\n  }\n\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  async _initializeState(params: Record<string, unknown>): Promise<void> {\n    try {\n      const { torusUrl, dappStorageKey, torusAlertContainer, torusIframe } = params;\n      this.torusUrl = torusUrl as string;\n      this.dappStorageKey = dappStorageKey as string;\n      this.torusAlertContainer = torusAlertContainer as HTMLDivElement;\n      this.torusIframe = torusIframe as HTMLIFrameElement;\n      this.torusIframe.addEventListener(\"load\", () => {\n        // only do this if iframe is not full screen\n        if (!this._state.isIFrameFullScreen) this._displayIframe();\n      });\n      const { currentLoginProvider, isLoggedIn } = (await this.request({\n        method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as CommunicationWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this._handleConnect(currentLoginProvider, isLoggedIn);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized communication state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  _handleWindow(windowId: string, { url, target, features }: { url?: string; target?: string; features?: string } = {}): void {\n    const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n    if (this.dappStorageKey) {\n      // If multiple instances, it returns the first one\n      if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;\n      else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    const handledWindow = new PopupHandler({ url: finalUrl, target, features });\n    handledWindow.open();\n    if (!handledWindow.window) {\n      this._createPopupBlockAlert(windowId, finalUrl.href);\n      return;\n    }\n    // Add to collection only if window is opened\n    this.windowRefs[windowId] = handledWindow;\n    // We tell the iframe that the window has been successfully opened\n    this.request<void>({\n      method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n      params: { windowId },\n    });\n    handledWindow.once(\"close\", () => {\n      // user closed the window\n      delete this.windowRefs[windowId];\n      this.request<void>({\n        method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n        params: { windowId },\n      });\n    });\n  }\n\n  _displayIframe({ isFull = false, rid = \"\" }: { isFull?: boolean; rid?: string } = {}): void {\n    const style: Partial<CSSStyleDeclaration> = {};\n    // set phase\n    if (!isFull) {\n      style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n      style.height = \"70px\";\n      style.width = \"70px\";\n      switch (this._state.buttonPosition) {\n        case BUTTON_POSITION.TOP_LEFT:\n          style.top = \"0px\";\n          style.left = \"0px\";\n          style.right = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.TOP_RIGHT:\n          style.top = \"0px\";\n          style.right = \"0px\";\n          style.left = \"auto\";\n          style.bottom = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_RIGHT:\n          style.bottom = \"0px\";\n          style.right = \"0px\";\n          style.top = \"auto\";\n          style.left = \"auto\";\n          break;\n        case BUTTON_POSITION.BOTTOM_LEFT:\n        default:\n          style.bottom = \"0px\";\n          style.left = \"0px\";\n          style.top = \"auto\";\n          style.right = \"auto\";\n          break;\n      }\n    } else {\n      style.display = \"block\";\n      style.width = \"100%\";\n      style.height = \"100%\";\n      style.top = \"0px\";\n      style.right = \"0px\";\n      style.left = \"0px\";\n      style.bottom = \"0px\";\n    }\n    Object.assign(this.torusIframe.style, style);\n    this._state.isIFrameFullScreen = isFull;\n    this.request<void>({\n      method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n      params: { isIFrameFullScreen: isFull, rid },\n    });\n  }\n\n  hideTorusButton(): void {\n    this._state.torusWidgetVisibility = false;\n    this._displayIframe();\n  }\n\n  showTorusButton(): void {\n    this._state.torusWidgetVisibility = true;\n    this._displayIframe();\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  protected _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void): void {\n    const cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n    }\n    this.tryWindowHandle(_payload as JRPCRequest<unknown>[], cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(currentLoginProvider: string, isLoggedIn: boolean): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { currentLoginProvider, isLoggedIn });\n      log.debug(messages.info.connected(currentLoginProvider));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this._state.currentLoginProvider = null;\n        this._state.isLoggedIn = false;\n        this._state.torusWidgetVisibility = false;\n        this._state.isIFrameFullScreen = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  // Called if the iframe wants to close the window cause it is done processing the request\n  private _handleCloseWindow(params: { windowId?: string }): void {\n    const { windowId } = params;\n    if (this.windowRefs[windowId]) {\n      this.windowRefs[windowId].close();\n      delete this.windowRefs[windowId];\n    }\n  }\n\n  private async _createPopupBlockAlert(windowId: string, url: string): Promise<void> {\n    const logoUrl = this.getLogoUrl();\n    const torusAlert = htmlToElement<HTMLDivElement>(\n      '<div id=\"torusAlert\" class=\"torus-alert--v2\">' +\n        `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` +\n        \"<div>\" +\n        `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` +\n        `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` +\n        \"</div>\" +\n        \"</div>\"\n    );\n\n    const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n    const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n    btnContainer.appendChild(successAlert);\n    torusAlert.appendChild(btnContainer);\n    const bindOnLoad = () => {\n      successAlert.addEventListener(\"click\", () => {\n        this._handleWindow(windowId, {\n          url,\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        torusAlert.remove();\n        if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n      });\n    };\n\n    const attachOnLoad = () => {\n      this.torusAlertContainer.appendChild(torusAlert);\n    };\n\n    await documentReady();\n    attachOnLoad();\n    bindOnLoad();\n    this.torusAlertContainer.style.display = \"block\";\n  }\n\n  private getLogoUrl(): string {\n    const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n    return logoUrl;\n  }\n}\n\nexport default TorusCommunicationProvider;\n","import { InPageWalletProviderState, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from \"@toruslabs/base-controllers\";\nimport { JRPCRequest, JRPCSuccess } from \"@toruslabs/openlogin-jrpc\";\nimport { EthereumRpcError } from \"eth-rpc-errors\";\nimport dequal from \"fast-deep-equal\";\nimport type { Duplex } from \"readable-stream\";\n\nimport BaseProvider from \"./baseProvider\";\nimport { InPageProviderState, ProviderOptions, RequestArguments, UnValidatedJsonRpcRequest } from \"./interfaces\";\nimport log from \"./loglevel\";\nimport messages from \"./messages\";\n\nclass TorusInPageProvider extends BaseProvider<InPageProviderState> {\n  protected static _defaultState: InPageProviderState = {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n    hasEmittedConnection: false,\n  };\n\n  /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */\n  public chainId: string | null;\n\n  /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */\n  public selectedAddress: string | null;\n\n  tryWindowHandle: (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => void;\n\n  constructor(connectionStream: Duplex, { maxEventListeners = 100, jsonRpcStreamName = \"provider\" }: ProviderOptions) {\n    super(connectionStream, { maxEventListeners, jsonRpcStreamName });\n\n    // private state\n    this._state = {\n      ...TorusInPageProvider._defaultState,\n    };\n\n    // public state\n    this.selectedAddress = null;\n    this.chainId = null;\n\n    this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n    this._handleChainChanged = this._handleChainChanged.bind(this);\n    this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n\n    // setup own event listeners\n\n    // EIP-1193 connect\n    this.on(\"connect\", () => {\n      this._state.isConnected = true;\n    });\n\n    const jsonRpcNotificationHandler = (payload: RequestArguments<unknown[] | Record<string, unknown>>) => {\n      const { method, params } = payload;\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        this._handleAccountsChanged(params as unknown[]);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        this._handleUnlockStateChanged(params as Record<string, unknown>);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        this._handleChainChanged(params as Record<string, unknown>);\n      }\n    };\n\n    // json rpc notification listener\n    this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n  }\n\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n  isConnected(): boolean {\n    return this._state.isConnected;\n  }\n\n  // Private Methods\n  //= ===================\n  /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */\n  async _initializeState(): Promise<void> {\n    try {\n      const { accounts, chainId, isUnlocked } = (await this.request({\n        method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n        params: [],\n      })) as InPageWalletProviderState;\n\n      // indicate that we've connected, for EIP-1193 compliance\n      this.emit(\"connect\", { chainId });\n\n      this._handleChainChanged({ chainId });\n      this._handleUnlockStateChanged({ accounts, isUnlocked });\n      this._handleAccountsChanged(accounts);\n    } catch (error) {\n      log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n    } finally {\n      log.info(\"initialized provider state\");\n      this._state.initialized = true;\n      this.emit(\"_initialized\");\n    }\n  }\n\n  /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */\n  _rpcRequest(payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], callback: (...args: unknown[]) => void, isInternal = false): void {\n    let cb = callback;\n    const _payload = payload;\n    if (!Array.isArray(_payload)) {\n      if (!_payload.jsonrpc) {\n        _payload.jsonrpc = \"2.0\";\n      }\n\n      if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n        // handle accounts changing\n        cb = (err: Error, res: JRPCSuccess<string[]>) => {\n          this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n          callback(err, res);\n        };\n      } else if (_payload.method === \"wallet_getProviderState\") {\n        this._rpcEngine.handle(payload as JRPCRequest<unknown>, cb);\n        return;\n      }\n    }\n    this.tryWindowHandle(_payload, cb);\n  }\n\n  /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */\n  protected _handleConnect(chainId: string): void {\n    if (!this._state.isConnected) {\n      this._state.isConnected = true;\n      this.emit(\"connect\", { chainId });\n      log.debug(messages.info.connected(chainId));\n    }\n  }\n\n  /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */\n  protected _handleDisconnect(isRecoverable: boolean, errorMessage?: string): void {\n    if (this._state.isConnected || (!this._state.isPermanentlyDisconnected && !isRecoverable)) {\n      this._state.isConnected = false;\n\n      let error: Error;\n      if (isRecoverable) {\n        error = new EthereumRpcError(\n          1013, // Try again later\n          errorMessage || messages.errors.disconnected()\n        );\n        log.debug(error);\n      } else {\n        error = new EthereumRpcError(\n          1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected()\n        );\n        log.error(error);\n        this.chainId = null;\n        this._state.accounts = null;\n        this.selectedAddress = null;\n        this._state.isUnlocked = false;\n        this._state.isPermanentlyDisconnected = true;\n      }\n\n      this.emit(\"disconnect\", error);\n    }\n  }\n\n  /**\n   * Called when accounts may have changed.\n   */\n  protected _handleAccountsChanged(accounts: unknown[], isEthAccounts = false, isInternal = false): void {\n    // defensive programming\n    let finalAccounts = accounts;\n    if (!Array.isArray(finalAccounts)) {\n      log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n      finalAccounts = [];\n    }\n\n    for (const account of accounts) {\n      if (typeof account !== \"string\") {\n        log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n        finalAccounts = [];\n        break;\n      }\n    }\n\n    // emit accountsChanged if anything about the accounts array has changed\n    if (!dequal(this._state.accounts, finalAccounts)) {\n      // we should always have the correct accounts even before solana_accounts\n      // returns, except in cases where isInternal is true\n      if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n        log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n      }\n\n      this._state.accounts = finalAccounts as string[];\n      this.emit(\"accountsChanged\", finalAccounts);\n    }\n\n    // handle selectedAddress\n    if (this.selectedAddress !== finalAccounts[0]) {\n      this.selectedAddress = (finalAccounts[0] as string) || null;\n    }\n  }\n\n  /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */\n  protected _handleChainChanged({ chainId }: { chainId?: string } = {}): void {\n    if (!chainId) {\n      log.error(\"Torus: Received invalid network parameters. Please report this bug.\", { chainId });\n      return;\n    }\n\n    if (chainId === \"loading\") {\n      this._handleDisconnect(true);\n    } else {\n      this._handleConnect(chainId);\n\n      if (chainId !== this.chainId) {\n        this.chainId = chainId;\n        if (this._state.initialized) {\n          this.emit(\"chainChanged\", this.chainId);\n        }\n      }\n    }\n  }\n\n  /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */\n  protected _handleUnlockStateChanged({ accounts, isUnlocked }: { accounts?: string[]; isUnlocked?: boolean } = {}): void {\n    if (typeof isUnlocked !== \"boolean\") {\n      log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", { isUnlocked });\n      return;\n    }\n\n    if (isUnlocked !== this._state.isUnlocked) {\n      this._state.isUnlocked = isUnlocked;\n      this._handleAccountsChanged(accounts || []);\n    }\n  }\n}\n\nexport default TorusInPageProvider;\n","/**\n * Returns whether the given image URL exists\n */\nfunction imgExists(url: string): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    try {\n      const img = document.createElement(\"img\");\n      img.onload = () => resolve(true);\n      img.onerror = () => resolve(false);\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n\n/**\n * Extracts a name for the site from the DOM\n */\nconst getSiteName = (window: Window): string => {\n  const { document } = window;\n\n  const siteName = document.querySelector<HTMLMetaElement>('head > meta[property=\"og:site_name\"]');\n  if (siteName) {\n    return siteName.content;\n  }\n\n  const metaTitle = document.querySelector<HTMLMetaElement>('head > meta[name=\"title\"]');\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n\n/**\n * Extracts an icon for the site from the DOM\n */\nasync function getSiteIcon(window: Window): Promise<string> {\n  try {\n    const { document } = window;\n\n    // Use the site's favicon if it exists\n    let icon = document.querySelector<HTMLLinkElement>('head > link[rel=\"shortcut icon\"]');\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    // Search through available icons in no particular order\n    icon = Array.from(document.querySelectorAll<HTMLLinkElement>('head > link[rel=\"icon\"]')).find((_icon) => Boolean(_icon.href));\n    if (icon && (await imgExists(icon.href))) {\n      return icon.href;\n    }\n\n    return \"\";\n  } catch (error) {\n    return \"\";\n  }\n}\n\n/**\n * Gets site metadata and returns it\n *\n */\nconst getSiteMetadata = async (): Promise<{ name: string; icon: string }> => ({\n  name: getSiteName(window),\n  icon: await getSiteIcon(window),\n});\n\nexport default getSiteMetadata;\n","import { Transaction } from \"@solana/web3.js\";\nimport { COMMUNICATION_JRPC_METHODS } from \"@toruslabs/base-controllers\";\nimport { setAPIKey } from \"@toruslabs/http-helpers\";\nimport { BasePostMessageStream, getRpcPromiseCallback, JRPCRequest } from \"@toruslabs/openlogin-jrpc\";\n\nimport TorusCommunicationProvider from \"./communicationProvider\";\nimport configuration from \"./config\";\nimport { documentReady, htmlToElement } from \"./embedUtils\";\nimport TorusInPageProvider from \"./inPageProvider\";\nimport {\n  BUTTON_POSITION,\n  LOGIN_PROVIDER_TYPE,\n  NetworkInterface,\n  PAYMENT_PROVIDER_TYPE,\n  PaymentParams,\n  TORUS_BUILD_ENV,\n  TorusCtorArgs,\n  TorusLoginParams,\n  TorusParams,\n  UnValidatedJsonRpcRequest,\n  UserInfo,\n  WALLET_PATH,\n} from \"./interfaces\";\nimport log from \"./loglevel\";\nimport PopupHandler from \"./PopupHandler\";\nimport getSiteMetadata from \"./siteMetadata\";\nimport {\n  FEATURES_CONFIRM_WINDOW,\n  FEATURES_DEFAULT_WALLET_WINDOW,\n  FEATURES_PROVIDER_CHANGE_WINDOW,\n  getNetworkConfig,\n  getPopupFeatures,\n  getTorusUrl,\n  getWindowId,\n  storageAvailable,\n} from \"./utils\";\n\nconst PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transactions\", \"sign_message\", \"connect\"];\nconst COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\n\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n  try {\n    if (typeof document === \"undefined\") return;\n    const torusIframeHtml = document.createElement(\"link\");\n    const { torusUrl } = await getTorusUrl(\"production\");\n    torusIframeHtml.href = `${torusUrl}/frame`;\n    torusIframeHtml.crossOrigin = \"anonymous\";\n    torusIframeHtml.type = \"text/html\";\n    torusIframeHtml.rel = \"prefetch\";\n    if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n      if (torusIframeHtml.relList.supports(\"prefetch\")) {\n        document.head.appendChild(torusIframeHtml);\n      }\n    }\n  } catch (error) {\n    log.warn(error);\n  }\n})();\n\nclass Torus {\n  isInitialized: boolean;\n\n  torusAlert: HTMLDivElement;\n\n  modalZIndex: number;\n\n  alertZIndex: number;\n\n  public requestedLoginProvider?: LOGIN_PROVIDER_TYPE;\n\n  provider: TorusInPageProvider;\n\n  communicationProvider: TorusCommunicationProvider;\n\n  dappStorageKey: string;\n\n  private torusAlertContainer: HTMLDivElement;\n\n  private torusUrl: string;\n\n  private torusIframe: HTMLIFrameElement;\n\n  private styleLink: HTMLLinkElement;\n\n  constructor({ modalZIndex = 99999 }: TorusCtorArgs = {}) {\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  get isLoggedIn(): boolean {\n    if (!this.communicationProvider) return false;\n    return this.communicationProvider.isLoggedIn;\n  }\n\n  async init({\n    buildEnv = TORUS_BUILD_ENV.PRODUCTION,\n    enableLogging = false,\n    network,\n    showTorusButton = false,\n    useLocalStorage = false,\n    buttonPosition = BUTTON_POSITION.BOTTOM_LEFT,\n    apiKey = \"torus-default\",\n    extraParams = {},\n  }: TorusParams = {}): Promise<void> {\n    if (this.isInitialized) throw new Error(\"Already initialized\");\n    setAPIKey(apiKey);\n    const { torusUrl, logLevel } = await getTorusUrl(buildEnv);\n    log.info(torusUrl, \"url loaded\");\n\n    this.torusUrl = torusUrl;\n    log.setDefaultLevel(logLevel);\n    if (enableLogging) log.enableAll();\n    else log.disableAll();\n\n    const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n\n    const torusIframeUrl = new URL(torusUrl);\n    if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";\n    else torusIframeUrl.pathname += \"/frame\";\n\n    const hashParams = new URLSearchParams();\n    if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n    hashParams.append(\"origin\", window.location.origin);\n\n    torusIframeUrl.hash = hashParams.toString();\n\n    // Iframe code\n    this.torusIframe = htmlToElement<HTMLIFrameElement>(\n      `<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`\n    );\n\n    this.torusAlertContainer = htmlToElement<HTMLDivElement>(\n      `<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`\n    );\n\n    this.styleLink = htmlToElement<HTMLLinkElement>(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n    const handleSetup = async () => {\n      return new Promise<void>((resolve, reject) => {\n        try {\n          window.document.head.appendChild(this.styleLink);\n          window.document.body.appendChild(this.torusIframe);\n          window.document.body.appendChild(this.torusAlertContainer);\n          this.torusIframe.addEventListener(\"load\", async () => {\n            const dappMetadata = await getSiteMetadata();\n            // send init params here\n            this.torusIframe.contentWindow.postMessage(\n              {\n                buttonPosition,\n                apiKey,\n                network: typeof network === \"string\" ? getNetworkConfig(network) : network,\n                dappMetadata,\n                extraParams,\n              },\n              torusIframeUrl.origin\n            );\n            await this._setupWeb3({\n              torusUrl,\n            });\n            if (showTorusButton) this.showTorusButton();\n            else this.hideTorusButton();\n            this.isInitialized = true;\n            (window as any).torus = this;\n            resolve();\n          });\n        } catch (error) {\n          reject(error);\n        }\n      });\n    };\n\n    await documentReady();\n    await handleSetup();\n  }\n\n  async login(params: TorusLoginParams = {}): Promise<string[]> {\n    if (!this.isInitialized) throw new Error(\"Call init() first\");\n    try {\n      this.requestedLoginProvider = params.loginProvider || null;\n      if (!this.requestedLoginProvider) {\n        this.communicationProvider._displayIframe({ isFull: true });\n      }\n      // If user is already logged in, we assume they have given access to the website\n      const res = await new Promise((resolve, reject) => {\n        // We use this method because we want to update inPage provider state with account info\n        this.provider._rpcRequest(\n          { method: \"solana_requestAccounts\", params: [this.requestedLoginProvider, params.login_hint] },\n          getRpcPromiseCallback(resolve, reject)\n        );\n      });\n\n      if (Array.isArray(res) && res.length > 0) {\n        return res;\n      }\n      // This would never happen, but just in case\n      throw new Error(\"Login failed\");\n    } catch (error) {\n      log.error(\"login failed\", error);\n      throw error;\n    } finally {\n      if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n    }\n  }\n\n  async logout(): Promise<void> {\n    if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n      params: [],\n    });\n    this.requestedLoginProvider = null;\n  }\n\n  async cleanUp(): Promise<void> {\n    if (this.communicationProvider.isLoggedIn) {\n      await this.logout();\n    }\n    this.clearInit();\n  }\n\n  clearInit(): void {\n    function isElement(element: unknown) {\n      return element instanceof Element || element instanceof Document;\n    }\n    if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n      this.styleLink.remove();\n      this.styleLink = undefined;\n    }\n    if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n      this.torusIframe.remove();\n      this.torusIframe = undefined;\n    }\n    if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n      this.torusAlert = undefined;\n      this.torusAlertContainer.remove();\n      this.torusAlertContainer = undefined;\n    }\n    this.isInitialized = false;\n  }\n\n  hideTorusButton(): void {\n    this.communicationProvider.hideTorusButton();\n  }\n\n  showTorusButton(): void {\n    this.communicationProvider.showTorusButton();\n  }\n\n  async setProvider(params: NetworkInterface): Promise<void> {\n    await this.communicationProvider.request({\n      method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n      params: { ...params },\n    });\n  }\n\n  async showWallet(path: WALLET_PATH, params: Record<string, string> = {}): Promise<void> {\n    const instanceId = await this.communicationProvider.request<unknown, string>({\n      method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n      params: [],\n    });\n    const finalPath = path ? `/${path}` : \"\";\n\n    const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n    // Using URL constructor to prevent js injection and allow parameter validation.!\n    finalUrl.searchParams.append(\"instanceId\", instanceId);\n    Object.keys(params).forEach((x) => {\n      finalUrl.searchParams.append(x, params[x]);\n    });\n    if (this.dappStorageKey) {\n      finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n    }\n    // No need to track this window state. Hence, no _handleWindow call.\n    const walletWindow = new PopupHandler({ url: finalUrl, features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW) });\n    walletWindow.open();\n  }\n\n  async getUserInfo(): Promise<UserInfo> {\n    const userInfoResponse = await this.communicationProvider.request<unknown, UserInfo>({\n      method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n      params: [],\n    });\n    return userInfoResponse as UserInfo;\n  }\n\n  async initiateTopup(provider: PAYMENT_PROVIDER_TYPE, params: PaymentParams): Promise<boolean> {\n    if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n    const windowId = getWindowId();\n    this.communicationProvider._handleWindow(windowId);\n    const topupResponse = await this.communicationProvider.request<unknown, boolean>({\n      method: COMMUNICATION_JRPC_METHODS.TOPUP,\n      params: { provider, params, windowId },\n    });\n    return topupResponse;\n  }\n\n  // Solana specific API\n  async sendTransaction(transaction: Transaction): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"send_transaction\",\n      // params: { message: transaction.serializeMessage().toString(\"hex\") },\n      params: { message: transaction.serialize({ requireAllSignatures: false }).toString(\"hex\") },\n    })) as string;\n    return response;\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    const response = (await this.provider.request({\n      method: \"sign_transaction\",\n      // params: { message: transaction.serializeMessage().toString(\"hex\") },\n      params: { message: transaction.serialize({ requireAllSignatures: false }).toString(\"hex\") },\n    })) as string;\n\n    const buf = Buffer.from(response, \"hex\");\n    const sendTx = Transaction.from(buf);\n    return sendTx;\n  }\n\n  async signAllTransactions(transactions: Transaction[]): Promise<Transaction[]> {\n    const encodedTransactions: string[] = transactions.map((x) => x.serialize({ requireAllSignatures: false }).toString(\"hex\"));\n    const response: string[] = await this.provider.request({\n      method: \"sign_all_transactions\",\n      params: { message: encodedTransactions },\n    });\n    const allSignedTransaction = response.map((msg) => Transaction.from(Buffer.from(msg, \"hex\")));\n    return allSignedTransaction;\n  }\n\n  async signMessage(data: Uint8Array): Promise<Uint8Array> {\n    const response = (await this.provider.request({\n      method: \"sign_message\",\n      params: {\n        data,\n      },\n    })) as Uint8Array;\n    return response;\n  }\n\n  async getGaslessPublicKey(): Promise<string> {\n    const response = (await this.provider.request({\n      method: \"get_gasless_public_key\",\n      params: [],\n    })) as string;\n    return response;\n  }\n\n  // async connect(): Promise<boolean> {\n  //   const response = (await this.provider.request({\n  //     method: \"connect\",\n  //     params: {},\n  //   })) as boolean;\n  //   return response;\n  // }\n\n  private handleDappStorageKey(useLocalStorage: boolean) {\n    let dappStorageKey = \"\";\n    if (isLocalStorageAvailable && useLocalStorage) {\n      const storedKey = window.localStorage.getItem(configuration.localStorageKey);\n      if (storedKey) dappStorageKey = storedKey;\n      else {\n        const generatedKey = `torus-app-${getWindowId()}`;\n        window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n        dappStorageKey = generatedKey;\n      }\n    }\n    this.dappStorageKey = dappStorageKey;\n    return dappStorageKey;\n  }\n\n  private async _setupWeb3(providerParams: { torusUrl: string }): Promise<void> {\n    log.info(\"setupWeb3 running\");\n    // setup background connection\n    const providerStream = new BasePostMessageStream({\n      name: \"embed_torus\",\n      target: \"iframe_torus\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n    const communicationStream = new BasePostMessageStream({\n      name: \"embed_communication\",\n      target: \"iframe_communication\",\n      targetWindow: this.torusIframe.contentWindow,\n    });\n\n    // compose the inPage provider\n    const inPageProvider = new TorusInPageProvider(providerStream, {});\n    const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n    inPageProvider.tryWindowHandle = (payload: UnValidatedJsonRpcRequest | UnValidatedJsonRpcRequest[], cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_CONFIRM_WINDOW),\n        });\n        // for inPageProvider methods sending windowId in request instead of params\n        // as params might be positional.\n        _payload.windowId = windowId;\n      }\n      inPageProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>[], cb);\n    };\n\n    communicationProvider.tryWindowHandle = (payload: JRPCRequest<unknown>, cb: (...args: unknown[]) => void) => {\n      const _payload = payload;\n      if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n        const windowId = getWindowId();\n        communicationProvider._handleWindow(windowId, {\n          target: \"_blank\",\n          features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW), // todo: are these features generic for all\n        });\n        // for communication methods sending window id in jrpc req params\n        (_payload.params as Record<string, unknown>).windowId = windowId;\n      }\n      communicationProvider._rpcEngine.handle(_payload as JRPCRequest<unknown>, cb);\n    };\n\n    // detect solana_requestAccounts and pipe to enable for now\n    const detectAccountRequestPrototypeModifier = (m) => {\n      const originalMethod = inPageProvider[m];\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const self = this;\n      inPageProvider[m] = function providerFunc(request, cb) {\n        const { method, params = [] } = request;\n        if (method === \"solana_requestAccounts\") {\n          if (!cb) return self.login({ loginProvider: params[0] });\n          self\n            .login({ loginProvider: params[0] })\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .then((res) => cb(null, res))\n            // eslint-disable-next-line promise/no-callback-in-promise\n            .catch((err) => cb(err));\n        }\n        return originalMethod.apply(this, [request, cb]);\n      };\n    };\n\n    // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n    detectAccountRequestPrototypeModifier(\"request\");\n    detectAccountRequestPrototypeModifier(\"sendAsync\");\n    detectAccountRequestPrototypeModifier(\"send\");\n\n    const proxiedInPageProvider = new Proxy(inPageProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n      // straight up lie that we deleted the property so that it doesn't\n      // throw an error in strict mode\n      deleteProperty: () => true,\n    });\n\n    this.provider = proxiedInPageProvider;\n    this.communicationProvider = proxiedCommunicationProvider;\n\n    await Promise.all([\n      inPageProvider._initializeState(),\n      communicationProvider._initializeState({\n        ...providerParams,\n        dappStorageKey: this.dappStorageKey,\n        torusAlertContainer: this.torusAlertContainer,\n        torusIframe: this.torusIframe,\n      }),\n    ]);\n    log.debug(\"Torus - injected provider\");\n  }\n}\n\nexport default Torus;\n","import Torus, { NetworkInterface, TorusCtorArgs, TorusLoginParams, TorusParams } from \"@toruslabs/solana-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport { InjectedProvider, TorusInjectedProvider } from \"@web3auth/solana-provider\";\nimport log from \"loglevel\";\n\nexport interface SolanaWalletOptions {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: TorusLoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n  chainConfig?: CustomChainConfig;\n}\ntype ProviderFactory = BaseProvider<BaseProviderConfig, BaseProviderState, InjectedProvider>;\n\nexport class SolanaWalletAdapter extends BaseAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_SOLANA;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: TorusLoginParams = {};\n\n  private solanaProvider: ProviderFactory | null = null;\n\n  private rehydrated = false;\n\n  constructor(params: SolanaWalletOptions = {}) {\n    super();\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      return this.solanaProvider?.provider || null;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    let network: NetworkInterface;\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const { blockExplorer, displayName, ticker, tickerName, rpcTarget, chainId } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, ticker, tickerName, logo: \"\" };\n    } else {\n      const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n    }\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    await this.torusInstance.init({ showTorusButton: false, ...this.initParams, network });\n\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig as CustomChainConfig,\n      },\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_SOLANA });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      await this.solanaProvider.setupProvider(this.torusInstance.provider as InjectedProvider);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_SOLANA, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(_: unknown): void {}\n}\n","'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n"],"names":["isStream","stream","pipe","isDuplexStream","writable","_write","_writableState","isWritableStream","readable","_read","_readableState","isReadableStream","disconnected","permanentlyDisconnected","unsupportedSync","method","invalidDuplexStream","invalidOptions","maxEventListeners","invalidRequestArgs","invalidRequestMethod","invalidRequestParams","invalidLoggerObject","invalidLoggerMethod","connected","chainId","TORUS_BUILD_ENV","BUTTON_POSITION","supportedVerifierList","api","translations","en","embed","continue","actionRequired","pendingAction","cookiesRequired","enableCookies","clickHere","de","ja","ko","zh","prodTorusUrl","localStorageKey","window","loglevel","getWindowId","Math","getTorusUrl","torusUrl","logLevel","FEATURES_PROVIDER_CHANGE_WINDOW","height","width","FEATURES_DEFAULT_WALLET_WINDOW","FEATURES_DEFAULT_POPUP_WINDOW","FEATURES_CONFIRM_WINDOW","getPopupFeatures","h","dualScreenLeft","dualScreenTop","document","left","top","w","getNetworkConfig","label","blockExplorerUrl","displayName","logo","rpcTarget","ticker","tickerName","constructor","connectionStream","jsonRpcStreamName","Error","messages","mux","pump","jsonRpcConnection","createStreamMiddleware","rpcEngine","createIdRemapMiddleware","req","res","ethErrors","message","data","next","done","error","log","createLoggerMiddleware","origin","location","request","args","Array","params","Promise","getRpcPromiseCallback","resolve","send","this","sendAsync","_handleStreamDisconnect","remoteLabel","emitter","warningMsg","logStreamDisconnectWarning","streamName","handleEvent","handle","handlerArgs","handlerWrapper","handler","htmlToElement","html","template","trimmedHtml","features","target","_setupTimer","Number","setInterval","clearInterval","open","url","focus","close","redirect","TorusCommunicationProvider","languageTranslations","configuration","userLanguage","userLanguages","Object","config","getUserLanguage","payload","COMMUNICATION_NOTIFICATIONS","rid","isFull","currentLoginProvider","isLoggedIn","_state","isIFrameFullScreen","isConnected","_initializeState","torusIframe","COMMUNICATION_JRPC_METHODS","_handleWindow","finalUrl","URL","handledWindow","PopupHandler","windowId","_displayIframe","style","torusWidgetVisibility","hideTorusButton","showTorusButton","_rpcRequest","cb","_payload","_handleConnect","_handleDisconnect","errorMessage","_handleCloseWindow","windowRefs","_createPopupBlockAlert","logoUrl","torusAlert","embedTranslations","successAlert","btnContainer","bindOnLoad","attachOnLoad","documentReady","getLogoUrl","buttonPosition","hasEmittedConnection","initialized","isPermanentlyDisconnected","TorusInPageProvider","PROVIDER_NOTIFICATIONS","PROVIDER_JRPC_METHODS","isUnlocked","accounts","isInternal","callback","err","_handleAccountsChanged","isEthAccounts","finalAccounts","account","dequal","length","selectedAddress","_handleChainChanged","_handleUnlockStateChanged","imgExists","img","e","reject","getSiteName","siteName","metaTitle","icon","_icon","Boolean","getSiteMetadata","getSiteIcon","name","PROVIDER_UNSAFE_METHODS","COMMUNICATION_UNSAFE_METHODS","isLocalStorageAvailable","type","storage","x","storageAvailable","torusIframeHtml","modalZIndex","communicationProvider","init","buildEnv","enableLogging","useLocalStorage","apiKey","extraParams","setAPIKey","dappStorageKey","handleDappStorageKey","torusIframeUrl","hashParams","alertZIndex","handleSetup","dappMetadata","network","login","logout","cleanUp","clearInit","element","isElement","setProvider","showWallet","instanceId","finalPath","path","walletWindow","getUserInfo","userInfoResponse","initiateTopup","provider","topupResponse","sendTransaction","transaction","requireAllSignatures","response","signTransaction","buf","Buffer","sendTx","Transaction","signAllTransactions","encodedTransactions","transactions","allSignedTransaction","msg","signMessage","getGaslessPublicKey","storedKey","generatedKey","_setupWeb3","providerStream","targetWindow","contentWindow","communicationStream","inPageProvider","detectAccountRequestPrototypeModifier","m","originalMethod","self","loginProvider","proxiedInPageProvider","Proxy","deleteProperty","proxiedCommunicationProvider","torusAlertContainer","SolanaWalletAdapter","WALLET_ADAPTERS","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","status","getChainConfig","Torus","torusInstance","chainConfig","ADAPTER_EVENTS","options","connect","WalletInitializationError","adapter","solanaProvider","setupProvider","reconnected","rehydrated","WalletLoginError","disconnect","cleanup","userInfo","setAdapterSettings","BaseAdapter","module","exports","equal","a","b","i","keys","isArray","RegExp","source","flags","valueOf","prototype","toString","hasOwnProperty","call","key"],"sourceRoot":""}