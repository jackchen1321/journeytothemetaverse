{"version":3,"file":"static/js/773.a79e83ca.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/openlogin-adapter/src/config.ts","../node_modules/@web3auth/openlogin-adapter/src/openloginAdapter.ts"],"sourcesContent":["import { OPENLOGIN_NETWORK, UX_MODE } from \"@toruslabs/openlogin\";\nimport { ChainNamespaceType, getChainConfig } from \"@web3auth/base\";\n\nimport { OpenloginAdapterOptions } from \"./interface\";\n\nexport const getOpenloginDefaultOptions = (chainNamespace?: ChainNamespaceType, chainId?: number | string): OpenloginAdapterOptions => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP,\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : undefined,\n    loginSettings: {\n      relogin: true,\n    },\n  };\n};\n","import OpenLogin, { getHashQueryParams, OPENLOGIN_NETWORK, OpenLoginOptions } from \"@toruslabs/openlogin\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapter,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { BaseProvider, BaseProviderConfig, BaseProviderState } from \"@web3auth/base-provider\";\nimport merge from \"lodash.merge\";\nimport log from \"loglevel\";\n\nimport { getOpenloginDefaultOptions } from \"./config\";\nimport type { LoginSettings, OpenloginAdapterOptions } from \"./interface\";\n\nexport interface OpenloginLoginParams {\n  login_hint: string;\n  loginProvider: string;\n}\n\ntype PrivateKeyProvider = BaseProvider<BaseProviderConfig, BaseProviderState, string>;\n\nexport class OpenloginAdapter extends BaseAdapter<OpenloginLoginParams> {\n  readonly name: string = WALLET_ADAPTERS.OPENLOGIN;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.MULTICHAIN;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.IN_APP;\n\n  public openloginInstance: OpenLogin | null = null;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  private openloginOptions: OpenLoginOptions;\n\n  private loginSettings: LoginSettings = {};\n\n  private privKeyProvider: PrivateKeyProvider | null = null;\n\n  constructor(params: OpenloginAdapterOptions) {\n    super();\n    log.debug(\"const openlogin adapter\", params);\n    const defaultOptions = getOpenloginDefaultOptions(params.chainConfig?.chainNamespace, params.chainConfig?.chainId);\n    this.openloginOptions = {\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET,\n      ...defaultOptions.adapterSettings,\n      ...(params.adapterSettings || {}),\n    };\n    this.loginSettings = { ...defaultOptions.loginSettings, ...params.loginSettings };\n    // if no chainNamespace is passed then chain config should be set before calling init\n    if (params.chainConfig?.chainNamespace) {\n      this.currentChainNamespace = params.chainConfig?.chainNamespace;\n      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      this.chainConfig = { ...defaultChainIdConfig, ...params?.chainConfig };\n      log.debug(\"const openlogin chainConfig\", this.chainConfig);\n      if (!this.chainConfig.rpcTarget) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n  }\n\n  get chainConfigProxy(): CustomChainConfig | null {\n    return this.chainConfig ? { ...this.chainConfig } : null;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.privKeyProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    if (!this.openloginOptions?.clientId) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    this.openloginInstance = new OpenLogin(this.openloginOptions);\n    const redirectResult = getHashQueryParams();\n    let isRedirectResult = true;\n    if (Object.keys(redirectResult).length > 0 && redirectResult.result) {\n      isRedirectResult = true;\n    }\n    await this.openloginInstance.init();\n\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params?: OpenloginLoginParams): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { ...params, adapter: WALLET_ADAPTERS.OPENLOGIN });\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error: unknown) {\n      log.error(\"Failed to connect with openlogin provider\", error);\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      if ((error as Error)?.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      }\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  }\n\n  // should be called only before initialization.\n  setAdapterSettings(adapterSettings: OpenLoginOptions): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    const defaultOptions = getOpenloginDefaultOptions();\n    this.openloginOptions = { ...defaultOptions.adapterSettings, ...(this.openloginOptions || {}), ...adapterSettings };\n  }\n\n  // should be called only before initialization.\n  setChainConfig(customChainConfig: CustomChainConfig): void {\n    super.setChainConfig(customChainConfig);\n    this.currentChainNamespace = customChainConfig.chainNamespace;\n  }\n\n  private async connectWithProvider(params?: OpenloginLoginParams): Promise<void> {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const { SolanaPrivateKeyProvider } = await import(\"@web3auth/solana-provider\");\n      this.privKeyProvider = new SolanaPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const { EthereumPrivateKeyProvider } = await import(\"@web3auth/ethereum-provider\");\n      this.privKeyProvider = new EthereumPrivateKeyProvider({ config: { chainConfig: this.chainConfig } });\n    } else {\n      throw new Error(`Invalid chainNamespace: ${this.currentChainNamespace} found while connecting to wallet`);\n    }\n    // if not logged in then login\n    if (!this.openloginInstance.privKey && params) {\n      await this.openloginInstance.login(\n        merge(this.loginSettings, { loginProvider: params.loginProvider }, { extraLoginOptions: { login_hint: params?.login_hint } })\n      );\n    }\n    let finalPrivKey = this.openloginInstance.privKey;\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const { getED25519Key } = await import(\"@toruslabs/openlogin-ed25519\");\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.OPENLOGIN, reconnected: !params } as CONNECTED_EVENT_DATA);\n    }\n  }\n}\n"],"names":["getOpenloginDefaultOptions","chainNamespace","adapterSettings","network","OPENLOGIN_NETWORK","clientId","uxMode","UX_MODE","chainConfig","getChainConfig","loginSettings","relogin","OpenloginAdapter","constructor","params","WALLET_ADAPTERS","ADAPTER_NAMESPACES","ADAPTER_CATEGORY","ADAPTER_STATUS","CHAIN_NAMESPACES","log","defaultOptions","defaultChainIdConfig","WalletInitializationError","chainConfigProxy","this","provider","Error","init","redirectResult","getHashQueryParams","isRedirectResult","Object","openloginInstance","ADAPTER_EVENTS","privKey","options","connect","adapter","connectWithProvider","error","WalletLoginError","disconnect","cleanup","status","getUserInfo","userInfo","setAdapterSettings","openloginOptions","setChainConfig","customChainConfig","currentChainNamespace","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","login","merge","loginProvider","extraLoginOptions","login_hint","finalPrivKey","getED25519Key","privKeyProvider","setupProvider","reconnected","BaseAdapter"],"sourceRoot":""}